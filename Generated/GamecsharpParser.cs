//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Gamecsharp.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GamecsharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, ID=24, NUMBER=25, 
		STRING=26, WS=27;
	public const int
		RULE_prog = 0, RULE_statement = 1, RULE_objectDecl = 2, RULE_objectBody = 3, 
		RULE_propertyDecl = 4, RULE_eventHandler = 5, RULE_eventType = 6, RULE_actionDecl = 7, 
		RULE_command = 8, RULE_assignment = 9, RULE_expr = 10, RULE_ifStatement = 11, 
		RULE_whileStatement = 12, RULE_functionCall = 13, RULE_exprList = 14, 
		RULE_value = 15;
	public static readonly string[] ruleNames = {
		"prog", "statement", "objectDecl", "objectBody", "propertyDecl", "eventHandler", 
		"eventType", "actionDecl", "command", "assignment", "expr", "ifStatement", 
		"whileStatement", "functionCall", "exprList", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'object'", "'{'", "'}'", "';'", "'property'", "'='", "'on'", "'click'", 
		"'keydown'", "'keyup'", "'mousemove'", "'action'", "'*'", "'/'", "'+'", 
		"'-'", "'('", "')'", "'if'", "'while'", "','", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"ID", "NUMBER", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gamecsharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GamecsharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GamecsharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GamecsharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18354306L) != 0)) {
				{
				{
				State = 32;
				statement();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDeclContext objectDecl() {
			return GetRuleContext<ObjectDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventHandlerContext eventHandler() {
			return GetRuleContext<EventHandlerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionDeclContext actionDecl() {
			return GetRuleContext<ActionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				objectDecl();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				eventHandler();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				actionDecl();
				}
				break;
			case T__18:
			case T__19:
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41;
				command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GamecsharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectBodyContext objectBody() {
			return GetRuleContext<ObjectBodyContext>(0);
		}
		public ObjectDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDeclContext objectDecl() {
		ObjectDeclContext _localctx = new ObjectDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_objectDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(T__0);
			State = 45;
			Match(ID);
			State = 46;
			Match(T__1);
			State = 47;
			objectBody();
			State = 48;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclContext[] propertyDecl() {
			return GetRuleContexts<PropertyDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclContext propertyDecl(int i) {
			return GetRuleContext<PropertyDeclContext>(i);
		}
		public ObjectBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectBodyContext objectBody() {
		ObjectBodyContext _localctx = new ObjectBodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_objectBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 50;
				propertyDecl();
				State = 51;
				Match(T__3);
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GamecsharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PropertyDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclContext propertyDecl() {
		PropertyDeclContext _localctx = new PropertyDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_propertyDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(T__4);
			State = 59;
			Match(ID);
			State = 60;
			Match(T__5);
			State = 61;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventHandlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EventTypeContext eventType() {
			return GetRuleContext<EventTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public EventHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventHandlerContext eventHandler() {
		EventHandlerContext _localctx = new EventHandlerContext(Context, State);
		EnterRule(_localctx, 10, RULE_eventHandler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__6);
			State = 64;
			eventType();
			State = 65;
			Match(T__1);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18350080L) != 0)) {
				{
				{
				State = 66;
				command();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventTypeContext : ParserRuleContext {
		public EventTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventTypeContext eventType() {
		EventTypeContext _localctx = new EventTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_eventType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GamecsharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public ActionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDeclContext actionDecl() {
		ActionDeclContext _localctx = new ActionDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_actionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(T__11);
			State = 77;
			Match(ID);
			State = 78;
			Match(T__1);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18350080L) != 0)) {
				{
				{
				State = 79;
				command();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 16, RULE_command);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				whileStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GamecsharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(ID);
			State = 94;
			Match(T__5);
			State = 95;
			expr(0);
			State = 96;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumeroContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(GamecsharpParser.NUMBER, 0); }
		public NumeroContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentesisContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParentesisContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdenticadorContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GamecsharpParser.ID, 0); }
		public IdenticadorContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdenticador(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicacionydivisionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultiplicacionydivisionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicacionydivision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				{
				_localctx = new ParentesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 99;
				Match(T__16);
				State = 100;
				expr(0);
				State = 101;
				Match(T__17);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumeroContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 103;
				Match(NUMBER);
				}
				break;
			case ID:
				{
				_localctx = new IdenticadorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 115;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 113;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new MultiplicacionydivisionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 107;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 108;
						_la = TokenStream.LA(1);
						if ( !(_la==T__12 || _la==T__13) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 109;
						expr(6);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 110;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 111;
						_la = TokenStream.LA(1);
						if ( !(_la==T__14 || _la==T__15) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 112;
						expr(5);
						}
						break;
					}
					} 
				}
				State = 117;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(T__18);
			State = 119;
			Match(T__16);
			State = 120;
			expr(0);
			State = 121;
			Match(T__17);
			State = 122;
			Match(T__1);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18350080L) != 0)) {
				{
				{
				State = 123;
				command();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(T__19);
			State = 132;
			Match(T__16);
			State = 133;
			expr(0);
			State = 134;
			Match(T__17);
			State = 135;
			Match(T__1);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18350080L) != 0)) {
				{
				{
				State = 136;
				command();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GamecsharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(ID);
			State = 145;
			Match(T__16);
			State = 146;
			exprList();
			State = 147;
			Match(T__17);
			State = 148;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 28, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			expr(0);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20) {
				{
				{
				State = 151;
				Match(T__20);
				State = 152;
				expr(0);
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GamecsharpParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(GamecsharpParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GamecsharpParser.ID, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamecsharpVisitor<TResult> typedVisitor = visitor as IGamecsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 130023424L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,27,161,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,5,0,34,8,0,10,0,12,0,37,9,0,1,1,1,1,1,1,1,1,3,1,43,8,1,1,
		2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,5,3,54,8,3,10,3,12,3,57,9,3,1,4,1,4,
		1,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,68,8,5,10,5,12,5,71,9,5,1,5,1,5,1,6,1,
		6,1,7,1,7,1,7,1,7,5,7,81,8,7,10,7,12,7,84,9,7,1,7,1,7,1,8,1,8,1,8,1,8,
		3,8,92,8,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
		106,8,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,114,8,10,10,10,12,10,117,9,
		10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,125,8,11,10,11,12,11,128,9,11,1,
		11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,5,12,138,8,12,10,12,12,12,141,9,
		12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,5,14,154,8,14,
		10,14,12,14,157,9,14,1,15,1,15,1,15,0,1,20,16,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,0,4,1,0,8,11,1,0,13,14,1,0,15,16,1,0,22,26,161,0,35,
		1,0,0,0,2,42,1,0,0,0,4,44,1,0,0,0,6,55,1,0,0,0,8,58,1,0,0,0,10,63,1,0,
		0,0,12,74,1,0,0,0,14,76,1,0,0,0,16,91,1,0,0,0,18,93,1,0,0,0,20,105,1,0,
		0,0,22,118,1,0,0,0,24,131,1,0,0,0,26,144,1,0,0,0,28,150,1,0,0,0,30,158,
		1,0,0,0,32,34,3,2,1,0,33,32,1,0,0,0,34,37,1,0,0,0,35,33,1,0,0,0,35,36,
		1,0,0,0,36,1,1,0,0,0,37,35,1,0,0,0,38,43,3,4,2,0,39,43,3,10,5,0,40,43,
		3,14,7,0,41,43,3,16,8,0,42,38,1,0,0,0,42,39,1,0,0,0,42,40,1,0,0,0,42,41,
		1,0,0,0,43,3,1,0,0,0,44,45,5,1,0,0,45,46,5,24,0,0,46,47,5,2,0,0,47,48,
		3,6,3,0,48,49,5,3,0,0,49,5,1,0,0,0,50,51,3,8,4,0,51,52,5,4,0,0,52,54,1,
		0,0,0,53,50,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,7,1,0,
		0,0,57,55,1,0,0,0,58,59,5,5,0,0,59,60,5,24,0,0,60,61,5,6,0,0,61,62,3,30,
		15,0,62,9,1,0,0,0,63,64,5,7,0,0,64,65,3,12,6,0,65,69,5,2,0,0,66,68,3,16,
		8,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,1,0,
		0,0,71,69,1,0,0,0,72,73,5,3,0,0,73,11,1,0,0,0,74,75,7,0,0,0,75,13,1,0,
		0,0,76,77,5,12,0,0,77,78,5,24,0,0,78,82,5,2,0,0,79,81,3,16,8,0,80,79,1,
		0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,1,0,0,0,84,82,1,
		0,0,0,85,86,5,3,0,0,86,15,1,0,0,0,87,92,3,18,9,0,88,92,3,22,11,0,89,92,
		3,24,12,0,90,92,3,26,13,0,91,87,1,0,0,0,91,88,1,0,0,0,91,89,1,0,0,0,91,
		90,1,0,0,0,92,17,1,0,0,0,93,94,5,24,0,0,94,95,5,6,0,0,95,96,3,20,10,0,
		96,97,5,4,0,0,97,19,1,0,0,0,98,99,6,10,-1,0,99,100,5,17,0,0,100,101,3,
		20,10,0,101,102,5,18,0,0,102,106,1,0,0,0,103,106,5,25,0,0,104,106,5,24,
		0,0,105,98,1,0,0,0,105,103,1,0,0,0,105,104,1,0,0,0,106,115,1,0,0,0,107,
		108,10,5,0,0,108,109,7,1,0,0,109,114,3,20,10,6,110,111,10,4,0,0,111,112,
		7,2,0,0,112,114,3,20,10,5,113,107,1,0,0,0,113,110,1,0,0,0,114,117,1,0,
		0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,21,1,0,0,0,117,115,1,0,0,0,118,
		119,5,19,0,0,119,120,5,17,0,0,120,121,3,20,10,0,121,122,5,18,0,0,122,126,
		5,2,0,0,123,125,3,16,8,0,124,123,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,
		0,126,127,1,0,0,0,127,129,1,0,0,0,128,126,1,0,0,0,129,130,5,3,0,0,130,
		23,1,0,0,0,131,132,5,20,0,0,132,133,5,17,0,0,133,134,3,20,10,0,134,135,
		5,18,0,0,135,139,5,2,0,0,136,138,3,16,8,0,137,136,1,0,0,0,138,141,1,0,
		0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,
		143,5,3,0,0,143,25,1,0,0,0,144,145,5,24,0,0,145,146,5,17,0,0,146,147,3,
		28,14,0,147,148,5,18,0,0,148,149,5,4,0,0,149,27,1,0,0,0,150,155,3,20,10,
		0,151,152,5,21,0,0,152,154,3,20,10,0,153,151,1,0,0,0,154,157,1,0,0,0,155,
		153,1,0,0,0,155,156,1,0,0,0,156,29,1,0,0,0,157,155,1,0,0,0,158,159,7,3,
		0,0,159,31,1,0,0,0,12,35,42,55,69,82,91,105,113,115,126,139,155
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
